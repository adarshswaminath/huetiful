{
  "sortBy": {
    "description": "This module has functions for sorting collections of colors using their properties. Here are some of the functions in action:",
    "specs": {
     
      "sortByDistance": {
        "params": [
          [
            "#2dd4bf",
            "#38bdf8",
            "#60a5fa",
            "#a78bfa",
            "#c084fc",
            "#e879f9",
            "#f472b6",
            "#fb7185"
          ],
          "brown",
          "asc"
        ],
        "description": "Arrange the colors in ascending order using the Euclidean distance between each color in the collection against the CSS named color 'brown'"
      },
      "sortByContrast": {
        "params": [
          [
            "#2dd4bf",
            "#38bdf8",
            "#60a5fa",
            "#a78bfa",
            "#c084fc",
            "#e879f9",
            "#f472b6",
            "#fb7185"
          ],
          "black",
          "desc"
        ],
        "description": "Arrange the colors in descending order using the contrast (WCAG 2.0) value between each color in the collection against black"
      },
      "sortByHue": {
        "params": [
          [
            "#2dd4bf",
            "#38bdf8",
            "#60a5fa",
            "#a78bfa",
            "#c084fc",
            "#e879f9",
            "#f472b6",
            "#fb7185"
          ],
          "asc",
          "lch65"
        ],
        "description": "Arrange the colors in ascending order using the hue angle of each color using the cylindrical form of the CIELAB colorspace under the D65 illuminant (or simply 'lch65')"
      }
    }
  },
  "colors": {
    "description": "This module has functions for returning colors from the bundled color maps included in the library which you can use to kickstart your designs. Here are some of the functions in action:",
    "specs": {
      "tailwindColors": {
        "params": ["all", "300"],
        "description": "Return the colors in the TailwindCSS default palette  from all the hue families at value '300'"
      }
    }
  },
  "filterBy": {
    "description": "This module has functions for filtering collections of colors by removing colors that don't meet the specified property ranges. Here are some of the functions in action:",
    "specs": {
      "filterByContrast": {
        "params": [
          [
            "#2dd4bf",
            "#38bdf8",
            "#60a5fa",
            "#a78bfa",
            "#c084fc",
            "#e879f9",
            "#f472b6",
            "#fb7185"
          ],
          "green",
          3.05,
          12
        ],
        "description": "Remove colors from the collection that don't have a contrast value (WCAG 2.0) ranging from 3.05 to 12 "
      },
      "filterByHue": {
        "params": [
          [
            "#2dd4bf",
            "#38bdf8",
            "#60a5fa",
            "#a78bfa",
            "#c084fc",
            "#e879f9",
            "#f472b6",
            "#fb7185"
          ],
          60,
          220,
          "lch"
        ],
        "description": "Remove colors from the collection that don't have a hue angle starting from 60 up to 220 using the 'lch' colorspace under the standard illuminant (D50)"
        
      }}},
  "generators": {
    "description": "This module has functions for creating or generating custom palettes or color scales. Mostly the functions will require a base color to manipulate but some can take collections as a starting point as well. Here are some of the functions in action:",
    "specs": {
      "discoverPalettes": {
        "params": [
          [
            "#ffff00",
            "#00ffdc",
            "#00ff78",
            "#00c000",
            "#007e00",
            "#164100",
            "#720000",
            "#600000",
            "#4e0000",
            "#3e0000",
            "#310000"
          ],
          "tetradic"
        ],
        "description": "Return a tetradic color scheme from the passed in collection. In the future it may support returning one-dimensional maps of all colors that satisfy the constraints of the targeted scheme."
      },
      "earthtone": {
        "params": ["pink", "lch", { "earthtones": "clay", "iterations": 5 }],
        "description": "Create a scale of spline interpolation between the earthtone 'clay' and the color 'pink'."},
      "hueShift": {
        "params": ["#3eb1f9"],
        "description": "Create a palette of hueshifted colors from the passed color using the default options"
      },
      "interpolateSpline": {
        "params": [["b2c3f1", "#a1bd2f", "#f3bac1"], "lch", 8, "natural"],
        "description": "Create a color scale with 8 samples using spline interpolation (natural) in the 'lch' colorspace"
      },
      "pairedScheme": {
        "params": ["green", { "hueStep": 6, "iterations": 4, "tone": "dark" }],
        "description": "Create a scheme that uses the color 'green' as a starting point  and adds a hue angle of 6 to get the color hue to pair with while using the 'dark' tone and getting 4 samples within that scale. Uses trilinear interpolation"
      },
      "pastel": {
        "params": ["green"],
        "description": "Create a pastel variant of the color 'green' ",
        "expect": "#81f281"
      }
    }
  }
}
